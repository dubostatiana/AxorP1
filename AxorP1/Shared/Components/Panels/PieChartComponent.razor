
@* PIE CHART FOR STATISTICS  *@

@if (IsParentCreated)
{
    <SfAccumulationChart @ref="PieChartRef" ID="@PieChartId" Theme="@ChartTheme" SelectionMode="AccumulationSelectionMode.Point" EnableBorderOnMouseMove="true" EnableAnimation="true" Width="100%" Height="100%">

        <AccumulationChartTooltipSettings @attributes="@ToolTipAttributes" Enable="true" Format="${point.x} : <b>${point.y} mW</b>"></AccumulationChartTooltipSettings>

        <AccumulationChartLegendSettings @attributes="@LegendAttributes" ToggleVisibility="false" TextWrap="@TextWrap.Wrap" Position="Syncfusion.Blazor.Charts.LegendPosition.Bottom">     
        </AccumulationChartLegendSettings>

        <AccumulationChartSeriesCollection>

            <AccumulationChartSeries @attributes="@SeriesAttributes" DataSource="@PieChartPoints" XName="ExpenseCategory" YName="ExpensePercentage" Name="Production" InnerRadius="40%">
                <AccumulationDataLabelSettings @attributes="@LabelAttributes">
                    <AccumulationChartDataLabelFont Color="white"></AccumulationChartDataLabelFont>
                </AccumulationDataLabelSettings>
            </AccumulationChartSeries>

        </AccumulationChartSeriesCollection>

    </SfAccumulationChart>
}


@code {

    private SfAccumulationChart? PieChartRef;
    private bool IsParentCreated { get; set; } = false;  // Initiate the render only if the parent has been created

    [Parameter] public string PieChartId { get; set; } = string.Empty;
    [Parameter] public Syncfusion.Blazor.Theme ChartTheme { get; set; } = Syncfusion.Blazor.Theme.Fluent;

    [Parameter] public Dictionary<string, object>? ToolTipAttributes { get; set; } = new Dictionary<string, object> { { "Enable", true } };
    [Parameter] public Dictionary<string, object>? LegendAttributes { get; set; }

    [Parameter] public Dictionary<string, object>? SeriesAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? LabelAttributes { get; set; } = new Dictionary<string, object> { { "Visible", false }};

    public List<PieData> PieChartPoints = new List<PieData>()
    {
        new PieData { ExpenseCategory = "Station 1", ExpensePercentage = 57.28 },
        new PieData { ExpenseCategory = "Station 2", ExpensePercentage = 4.73 },
        new PieData { ExpenseCategory = "Station 3", ExpensePercentage = 5.96 },
        new PieData { ExpenseCategory = "Station 4", ExpensePercentage = 4.37 },
        new PieData { ExpenseCategory = "Station 5", ExpensePercentage = 7.48 },
        new PieData { ExpenseCategory = "Station 6", ExpensePercentage = 14.06 },
        new PieData { ExpenseCategory = "Station 7", ExpensePercentage = 6.12 }
    };
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void Refresh()
    {
        if (!IsParentCreated)
        {
            IsParentCreated = true;
            StateHasChanged();
        }

        PieChartRef?.Refresh();
    }

    public class PieData
    {
        public string ExpenseCategory { get; set; }
        public double ExpensePercentage { get; set; }

    } 
}