@using AxorP1.Services
@using System.ComponentModel
@inject ILogger<ChartComponent> Logger
@inject ThemeProvider ThemeProvider 

@* CHART COMPONENT *@
@if (IsParentCreated)
{
    <SfChart @ref="ChartRef"  ID="@ChartId" Theme="@ThemeProvider.AppTheme" Width="100%" Height="100%">

        <ChartArea @attributes="@AreaAttributes">
            <ChartAreaBorder @attributes="@AreaBorderAttributes"></ChartAreaBorder>
        </ChartArea>

        <ChartPrimaryXAxis @attributes="@XAxisAttributes">
            <ChartAxisMajorTickLines @attributes="XAxisLinesAttributes"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle @attributes="@XAxisLineStyleAttributes"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>

        <ChartPrimaryYAxis @attributes="@YAxisAttributes">
            <ChartAxisMajorTickLines @attributes="@YAxisLinesAttributes"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle @attributes="@YAxisLineStyleAttributes"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>

        <ChartTooltipSettings @attributes="@ToolTipAttributes"></ChartTooltipSettings>

        <ChartLegendSettings @attributes="@LegendAttributes"></ChartLegendSettings>

        <ChartCrosshairSettings @attributes="@CrosshairAttributes">
            <ChartCrosshairLine @attributes="@CrosshairLineAttributes"></ChartCrosshairLine>
        </ChartCrosshairSettings>

       <ChartSeriesCollection>
            @foreach (var chart in ChartSeriesList)
            {
                <ChartSeries @attributes="@chart.SeriesAttributes">
                    <ChartMarker @attributes="@chart.MarkerAttributes">
                        <ChartDataLabel @attributes="chart.LabelAttributes" ></ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            }
        </ChartSeriesCollection>  

    </SfChart>
}

@code {
    private SfChart? ChartRef;
    private bool IsParentCreated { get; set; } = false; // Initiate the render only if the parent has been created

    [Parameter] public string ChartId { get; set; } = string.Empty;

    [Parameter] public Dictionary<string, object>? AreaAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? AreaBorderAttributes { get; set; }

    [Parameter] public Dictionary<string, object>? XAxisAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? YAxisAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? XAxisLinesAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? YAxisLinesAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? XAxisLineStyleAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? YAxisLineStyleAttributes { get; set; }

    [Parameter] public Dictionary<string, object>? ToolTipAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? LegendAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? CrosshairAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? CrosshairLineAttributes { get; set; }

    [Parameter] public List<ChartSeriesConfig> ChartSeriesList { get; set; } = new List<ChartSeriesConfig>() ;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void Refresh()
    {
        try
        {   
            if(ChartRef != null)
            {
                ChartRef?.RefreshAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error trying to Refresh ChartComponent : {ex.Message}\n{ex.StackTrace}");
        }

    }

    public void StateChanged()
    {
        if (!IsParentCreated)
        {
            IsParentCreated = true;
        }

        StateHasChanged();
    }

    public class ChartSeriesConfig
    {
        public Dictionary<string, object>? SeriesAttributes { get; set; }
        public Dictionary<string, object>? MarkerAttributes { get; set; } = new Dictionary<string, object> { { "Visible", true } };
        public Dictionary<string, object>? LabelAttributes { get; set; } = new Dictionary<string, object> {{ "Visible", true },{ "Position", Syncfusion.Blazor.Charts.LabelPosition.Bottom }};
    }
}
