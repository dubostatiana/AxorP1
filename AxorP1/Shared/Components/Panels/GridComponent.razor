@typeparam GridTValue
@inject ILogger<GridComponent<GridTValue>> Logger

@* GRID COMPONENT *@

<SfGrid @ref="GridRef" TValue="GridTValue" DataSource="@DataSource" ID="@GridId" Width="100%" Height="100%">

    <GridPageSettings @attributes="@GridPageAttributes"></GridPageSettings>
    <GridEditSettings @attributes="@GridEditAttributes"></GridEditSettings>
    <GridFilterSettings @attributes="@GridFilterAttributes"></GridFilterSettings>
    <GridGroupSettings @attributes="@GridGroupAttributes"></GridGroupSettings>

     <GridColumns>
            @foreach (var column in ColumnsList)
            {
                @if(column.Template != null) // If the column has a template
                {
                    <GridColumn @attributes="@column.ColumnAttributes">
                          <Template>
                            @column.Template(context) 
                          </Template>
                    </GridColumn>
                }
                else
                {
                    <GridColumn @attributes="@column.ColumnAttributes"></GridColumn>
                }
            }   
     </GridColumns>

</SfGrid>


@code {
    private SfGrid<GridTValue>? GridRef;

    [Parameter] public IEnumerable<GridTValue> DataSource { get; set; } = new List<GridTValue>();
    [Parameter] public string GridId { get; set; } = string.Empty;

    [Parameter] public Dictionary<string, object>? GridPageAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? GridEditAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? GridFilterAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? GridGroupAttributes { get; set; }

    [Parameter] public List<GridColumnsConfig> ColumnsList { get; set; } = new List<GridColumnsConfig>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    public void Refresh()
    {
        try
        {
            if(GridRef != null)
            {
                GridRef?.Refresh();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error trying to Refresh GridComponent : {ex.Message}\n{ex.StackTrace}");
        }
    }

    public class GridColumnsConfig
    {
        public Dictionary<string, object>? ColumnAttributes { get; set; }
        public RenderFragment<object>? Template { get; set; }
    }
}

