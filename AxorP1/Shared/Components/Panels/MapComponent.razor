@typeparam MarkerTValue

@* MAP COMPONENT *@

@if (IsParentCreated)
{
    <SfMaps @ref="MapRef" ID="@MapId" Theme="@MapTheme" Width="100%" Height="100%">

        <MapsEvents OnMarkerClick="@OnMarkerClickEvent"></MapsEvents>
        <MapsTitleSettings Text="@Title"></MapsTitleSettings>
        <MapsMargin Bottom="0" Left="0" Right="0" Top="0"></MapsMargin>

        <MapsLayers>

            <MapsLayer ShapeData="@MapShapeData" TValue="string">

                <MapsMarkerSettings >
                    <MapsMarker @attributes="@MarkerAttributes" TValue="@MarkerTValue">
                        <MapsMarkerBorder Width="1" Color="black"></MapsMarkerBorder>
                        <MapsMarkerTooltipSettings @attributes="@MarkerToolTipAttributes"></MapsMarkerTooltipSettings>
                    </MapsMarker>
                </MapsMarkerSettings>

                <MapsDataLabelSettings Visible="true" LabelPath="name" IntersectionAction="IntersectAction.Hide" ></MapsDataLabelSettings>
                <MapsShapeSettings Autofill="true"></MapsShapeSettings>

                <MapsZoomSettings Enable="@EnableZoom">
                    <MapsZoomToolbarSettings @attributes="@ZoomToolBarAttributes"></MapsZoomToolbarSettings>
                </MapsZoomSettings>

            </MapsLayer>

        </MapsLayers>

    </SfMaps>
}

@code {

    private SfMaps? MapRef;
    private bool IsParentCreated { get; set; } = false;  // Initiate the render of the Maps component only if the parent has been created

    [Parameter] public Syncfusion.Blazor.Theme MapTheme { get; set; } = Syncfusion.Blazor.Theme.Fluent;

    [Parameter] public string MapId { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool EnableZoom { get; set; } = true;
    [Parameter] public Dictionary<string, object>? MarkerAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? MarkerToolTipAttributes { get; set; }
    [Parameter] public Dictionary<string, object>? ZoomToolBarAttributes { get; set; }

    [Parameter] public EventCallback<MarkerClickEventArgs> OnMarkerClickEvent { get; set; }


    public async void Refresh()
    {

        if (!IsParentCreated)
        {
            IsParentCreated = true;
            StateHasChanged();

            //  Parent Layout is determined after a delay,
            //  a delay must be provided before refreshing the Maps component
            await Task.Delay(1000);
        }

        MapRef?.Refresh();
    }


    public class MapDataSettings
    {
        public Boolean async { get; set; }
        public String dataOptions { get; set; }
        public String type { get; set; }
    }

    private MapDataSettings MapShapeData = new MapDataSettings
    {
            async = true,
            type = "GET",
            dataOptions = "maps/north-america.json"
    };


    

}