@* RANGE NAVIGATOR COMPONENT *@

@if (IsParentCreated)
{
    <div class="rangeContainer">
        <div class="rangeNavigator">
            <div>
                <SfRangeNavigator @ref=RangeRef Id="RangeNav" Theme="@RangeTheme" @bind-Value="@value" LabelPosition="AxisPosition.Outside" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" Interval="1" IntervalType="RangeIntervalType.Years" Width="100%" Height="100%">

                    <RangeNavigatorEvents Changed="OnRangeChanged"></RangeNavigatorEvents>
                    <RangeNavigatorMajorGridLines Width="0"></RangeNavigatorMajorGridLines>
                    <RangeNavigatorRangeTooltipSettings Enable="true" Format="yyyy/MM/dd" DisplayMode="TooltipDisplayMode.Always"></RangeNavigatorRangeTooltipSettings>

                    <RangeNavigatorSeriesCollection>
                        <RangeNavigatorSeries DataSource="@DataSource" XName="@XName" YName="@YName" Width="2" Type="RangeNavigatorType.Area">
                            <RangeNavigatorSeriesBorder  Width="2"></RangeNavigatorSeriesBorder>
                        </RangeNavigatorSeries>
                    </RangeNavigatorSeriesCollection>

                </SfRangeNavigator>
            </div>
            <div>
                <SfChart @ref="ChartRef" ID="RangeNavChart" Theme="@RangeTheme" Width="100%" Height="100%">

                    <ChartArea><ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder></ChartArea>

                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Interval="1" IntervalType="IntervalType.Months" ZoomFactor="@ZF" ZoomPosition="@ZP" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    </ChartPrimaryXAxis>

                    <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>

                    <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
                        <ChartCrosshairLine Color="transparent" Width="0"></ChartCrosshairLine>
                    </ChartCrosshairSettings>

                    <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y} mW</b>" ></ChartTooltipSettings>
                    <ChartLegendSettings Visible="false"></ChartLegendSettings>

                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@DataSource" XName="@XName" YName="@YName" Width="2" Type="ChartSeriesType.Spline">
                        </ChartSeries>
                    </ChartSeriesCollection>

                </SfChart>

            </div>
        </div>

    </div>
}

@code {

    private SfRangeNavigator? RangeRef;
    private SfChart? ChartRef;

    private bool IsParentCreated { get; set; }  // Initiate the render only if the parent has been created

    [Parameter] public Syncfusion.Blazor.Theme RangeTheme { get; set; } = Syncfusion.Blazor.Theme.Fluent;
    [Parameter] public IEnumerable<object> DataSource { get; set; } = new List<object>();

    private string XName = nameof(Station.DateTime);
    private string YName = nameof(Station.CentralProduction);

    private double ZF = 1;
    private double ZP = 0;
    private object value = new object[] { DateTime.Now, DateTime.Now.AddMonths(-12) }; // Initial selected range : 12 months from now


    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    // Changed event on RangeNavigator
    public void OnRangeChanged(ChangedEventArgs args)
    {
        ZF = args.ZoomFactor;
        ZP = args.ZoomPosition;
        StateHasChanged();
    }

    public async void Refresh()
    {
        await Task.Delay(500);

        if (!IsParentCreated)
        {
            IsParentCreated = true;
            StateHasChanged();
        }

       RangeRef?.RefreshAsync();
       ChartRef?.RefreshAsync();
    }


}


<style>

    /* Apply styles to the container of the SfRangeNavigator */
  
    .rangeContainer {
      width:100%;
      height: 100%;
    }

    .rangeNavigator {
        width: inherit ;
        height: inherit ;
        overflow:auto;
    }       
    
    #RangeNav,#RangeNavChart {
       
    }



</style>