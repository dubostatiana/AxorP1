@inherits LayoutComponentBase
@using AxorP1.Services
@inject ThemeProvider ThemeProvider
@inject NavigationManager Navigation


<div class="page @ThemeProvider.ThemeClass">

    <div class="menu">
        <NavMenu />
    </div>

    <div class="page-content">
        <main class="main">

            @*Initialize the Toolbar component*@
            <SfToolbar CssClass="dockToolbar" Width="100%">
                <ToolbarItems>
                    <ToolbarItem Align="ItemAlign.Left">
                        <Template>
                            @* Logo image  *@
                            <span>
                                <img class="navbar-brand" alt="Logo" src="/images/ICONE-AXOR_BLANC.svg" />
                                </span>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Align="ItemAlign.Right">
                        <Template>
                            @*Theme switcher*@
                            <div class="theme-switch">
                                <SfSwitch CssClass="btnSwitch" Checked="@ThemeProvider.isDarkMode" OnLabel="Sombre" OffLabel="Clair" ValueChange="@switchStateChanged"></SfSwitch>
                            </div>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>

            <article class="content">
                @Body
            </article>
        </main>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {


    protected EventCallback<ChangeEventArgs<bool?>> switchStateChanged;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        switchStateChanged = EventCallback.Factory.Create<ChangeEventArgs<bool?>>(this, HandleSwitchStateChanged);


    }

    protected async Task HandleSwitchStateChanged(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {

        if (ThemeProvider.isDarkMode != args.Checked)
        {

            var darkTheme = (bool)args.Checked;

            await ThemeProvider.ChangeTheme(darkTheme);

            // Refresh components
            Navigation.NavigateTo(Navigation.Uri, true);
            StateHasChanged();
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            if (ThemeProvider.isDarkMode == null)
            {
                await ThemeProvider.InitialTheme();

                StateHasChanged();
            }
        }
        
    }


}